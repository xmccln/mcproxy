# This workflow will build a golang project for multiple platforms
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Test
      run: go test -v ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            suffix: .exe
          - goos: windows
            goarch: arm64
            suffix: .exe
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Get project name
      id: project
      run: echo "name=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -v -ldflags="-s -w" -o dist/${{ steps.project.outputs.name }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} ./...

    - name: Create archive
      run: |
        cd dist
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r ${{ steps.project.outputs.name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip ${{ steps.project.outputs.name }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
        else
          tar -czf ${{ steps.project.outputs.name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz ${{ steps.project.outputs.name }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.project.outputs.name }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          dist/${{ steps.project.outputs.name }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
          dist/${{ steps.project.outputs.name }}-${{ matrix.goos }}-${{ matrix.goarch }}.*

    - name: Upload to GitHub Packages (on release)
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd dist
        # Upload binary to GitHub Packages
        if [ "${{ matrix.goos }}" = "windows" ]; then
          gh release upload ${{ github.event.release.tag_name }} ${{ steps.project.outputs.name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
        else
          gh release upload ${{ github.event.release.tag_name }} ${{ steps.project.outputs.name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
        fi
